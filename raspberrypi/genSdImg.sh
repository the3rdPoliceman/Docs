#!/bin/bash
#
# ALL THIS TOP BIT WAS GENERATED BY ARGBSH TO PARSE ARGUMENTS. SEE BOTTOM FOR ACTUAL CODE
#
#
# ARG_POSITIONAL_SINGLE([device])
# ARG_POSITIONAL_SINGLE([destination_directory])
# ARG_POSITIONAL_SINGLE([destination_file_name])
# ARG_HELP([Help for genSdImage.sh])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "Help for genSdImage.sh"
	printf 'Usage: %s [-h|--help] <device> <destination_directory> <destination_file_name>\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# The help argurment doesn't accept a value,
			# we expect the --help or -h, so we watch for them.
			-h|--help)
				print_help
				exit 0
				;;
			# We support getopts-style short arguments clustering,
			# so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
			# After stripping the leading -h from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Check that we receive expected amount positional arguments.
# Return 0 if everything is OK, 1 if we have too little arguments
# and 2 if we have too much arguments
handle_passed_args_count()
{
	local _required_args_string="'device', 'destination_directory' and 'destination_file_name'"
	test "${_positionals_count}" -ge 3 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 3 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 3 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names="_arg_device _arg_destination_directory _arg_destination_file_name "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


echo ""
echo "Specified Device: $_arg_device"
echo "Specified Destination Directory: $_arg_destination_directory"
echo "Specified Desitination File Name: $_arg_destination_file_name"

echo ""
echo "The following disks were detected"
diskutil_output=$(diskutil list)
echo "${diskutil_output}"
echo ""
read -p "Are you sure ${_arg_device} is the correct disk? (y/n)" -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
		echo "In that case, forget it"
    exit 1
fi

tmp_suffix=.tmp
xz_suffix=.xz
tmp_file=$_arg_destination_file_name$tmp_suffix
final_file=$_arg_destination_file_name$xz_suffix
tmp_file_path=$_arg_destination_directory/$tmp_file
final_file_path=$_arg_destination_directory/$final_file

echo ""
echo ""
echo "Temp file will be created at: $tmp_file_path"
echo "Final file will be: $final_file_path"
echo ""
read -p "Do you wish to continue? (y/n)" -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
		echo "exiting"
    exit 1
fi


diskutil unmountDisk $_arg_device
echo "About to copy device content to destination folder. This will take a while, and there won't be anything to see. No errors=No Worries"
sudo dd if=/dev/disk2 of=$tmp_file_path bs=1m

cd $_arg_destination_directory
echo "About to shrink image. Again, long time, no errors no worries"
docker run --privileged=true --rm --volume $(pwd):/workdir mgomesborges/pishrink pishrink -pZv $tmp_file $final_file

if [ $? -eq 0 ] 
then
		echo "removing temp file"	
		rm $tmp_file
else
		echo  "pishrink failed. Leaving the temp image file in place at $tmp_file_path"	
fi

# ] <-- needed because of Argbash
